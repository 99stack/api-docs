openapi: 3.0.0
info:
  title: 99Stack API documentation
  version: '1.0'
  contact: {}
  description: |-
    **API endpoint**: https://api.99stack.com

    **Bearer token**: https://dash.99stack.com

    ## Using the API

    ### Information

    99Stack API is designed to be fast, secure and reliable. Requests and responses are in the JSON format (application/json) and requests follows the following format: *version/group/function*, alternatively *version/group/function/args* for functions that takes one single argument, usually a region ID. Standard HTTP error codes are used together with status messages to indicate status.

    ### Response codes

    A list over available response codes and their purpose.

    | HTTP Response Code  | Description  |
    |---|---|
    | 200  | Function successfully executed.  |
    | 201  | Resource created successfully  |
    | 204  | Resource removed successfully (no response body)  |
    | 301  | Function is deprecated, (see documentation)  |
    | 400  | Invalid input data, (see documentation)  |
    | 403  | Access denied, check authentication token  |
    | 404  | Function not found  |
    | 405  | Invalid HTTP method  |
    | 429  | Too many requests, please wait  |
    | 500  | Internal server error  |
    | 501  | Function not implemented,   |
    | 502  | Bad gateway, failed to contact external API  |
    | 503  | Service unavailable, maintenance in progress  |

    ### Rate limits

    Rate limits are not in use. However, if possible try to not send more than one request per second. Too many requests in a short time for any reason can trigger the web servers standard protection, effectively blocking all requests from your IP for a few minutes.

    ### Time and Date

    All time and date fields returned by this API are displayed in UTC in the ISO-8601 format.

    ### Examples

    GET request with no arguments:

    ```bash
    curl -X GET "https://api.99stack.com/v1/region/list"
    ```

    GET request that requires your API token:

    ```bash
    curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' "https://api.99stack.com/v1/server/list"
    ```

    POST request containing a JSON request body:

    ```bash
    curl -X POST -H 'Authorization: Bearer YOUR_TOKEN' -H 'Content-Type: application/json' -d '{"name": "New API token"}' "https://api.99stack.com/v1/account/token_create"
    ```

    DELETE request containing a JSON request body:

    ```bash
    curl -X DELETE -H 'Authorization: Bearer YOUR_TOKEN' -H 'Content-Type: application/json' -d '{"server_id": 16324}' "https://api.99stack.com/v1/server/remove"
    ```

    # Authentication

    For any API request that requires authentication, the Authorization header needs to be set to a valid Bearer token, these tokens can be generated in the [control panel](https://dash.99stack.com/auth/manage-api-tokens), or by sending a valid request to `/v1/account/login`. Once you have the token, use the following format:

    ```bash
    Authorization: Bearer YOUR_TOKEN
    ```

    See examples above for usage with cURL.
  termsOfService: 'https://www.99stack.com/legal/terms-of-service'
  license:
    name: MIT
    url: 'https://github.com/99stack/api-docs/blob/master/LICENSE'
servers:
  - url: 'https://api.99stack.com/v1'
    variables: {}
    description: 99Stack API
paths:
  /account/token_create:
    $ref: ./paths/account_token/create.yaml
  /account/token_rename:
    $ref: ./paths/account_token/rename.yaml
  /snapshot/restore:
    $ref: ./paths/snapshot/restore.yaml
  /snapshot/remove:
    $ref: ./paths/snapshot/remove.yaml
  /snapshot/create:
    $ref: ./paths/snapshot/create.yaml
  /snapshot/list:
    $ref: ./paths/snapshot/list.yaml
  /server/remove:
    delete:
      tags:
        - Server
      summary: Remove server
      description: "Remove a server by uuid or ID. Billing will stop immediately for the server and some of it's related resources. Please note that removal of additional resources will be handled differently depending on region, see below table for more details:\n\n**Additional resources on server removal**\n\n| #  | Software license  | Automatic backups  | Snapshot  | IP addresses  | Floating IP  |\n|---|---|---|---|---|---|    \n| 1xx  | Removed  | Removed  | Not affected  | Removed  | Detached  |\n| 2xx  | Removed  | Removed  | Not affected  | Removed  | Detached  |\n| 3xx  | Detached  | Detached  | Not affected  | Detached  | Detached  |\n\n**Information**\n\n- Removed: *The resources is removed with the server*\n- Detached: *The resources is detached from the server but not deleted, billing continues*\n- Not affected: *The resources has no connection to the server (thus not affected by removal request), billing continues*"
      operationId: RemoveServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Invalid resource requested
                response_type: warning
                response_code: 404
          description: Not Found
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: 'Permission denied, server is still initializing, please try again in about x minutes'
                response_type: warning
                response_code: 429
          description: Too Many Requests
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /server/custom_create:
    post:
      tags:
        - Server
      summary: Create custom server
      description: |-
        Deploy a new custom server in any supported region, see "Create ready server" for default configuration. The principle is the same with custom servers. However, instead of using ID's corresponding to fixed plans, the "plan" property is a JSON object defining the server size.


        This function is an alias for:

        ```
        /v1/server/create
        ```
      operationId: CreateCustomServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        description: Create server
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: "Expected: '...', not found"
                response_type: warning
                response_code: 400
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Authorization token does not exist
          description: Unauthorized
        '502':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Deployment failed...
                response_type: error
                response_code: 502
          description: Bad Gateway
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /server/ready_create:
    post:
      tags:
        - Server
      summary: Create ready server
      description: |-
        Deploy a new server from a fixed "ready" plan anywhere in 99Stack cloud.

        This function is an alias for:

        ```
        /v1/server/create
        ```
      operationId: CreateReadyServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              hostname: web-server-2
              label: Second Web server
              region: 201
              image: 2102
              plan: 2101
              auto_backups: false
              ipv6_networking: true
              ddos_protection: false
              private_networking: true
              ssh_key: 5cb46fd8-1b2d-11e9-ab14-d663bd873d93
              script_url: 'https://raw.github.com...'
              user_data: I2Nsb3VkLWluaXQ=
        required: true
      responses:
        '201':
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: "Expected: '...', not found"
                response_type: warning
                response_code: 400
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Authorization token does not exist
          description: Unauthorized
        '502':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Deployment failed...
                response_type: error
                response_code: 502
          description: Bad Gateway
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /server/stop:
    post:
      tags:
        - Server
      summary: Stop server
      description: 'Force a server to halt, this is the same as pressing the power off button on a physical machine.'
      operationId: StopServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '202':
          description: Accepted
  /server/start:
    post:
      tags:
        - Server
      summary: Start server
      description: 'Send a startup signal to server, this is similar to pressing the power on button.'
      operationId: StartServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '202':
          description: Accepted
  /server/reboot:
    post:
      tags:
        - Server
      summary: Reboot server
      description: 'Rend a reboot signal to the server, if the server is not running this will only start the server.'
      operationId: RebootServer
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '202':
          description: Accepted
  /server/is_online:
    post:
      tags:
        - Server
      summary: Check if online
      description: Returns power status for the server.
      operationId: CheckIfOnline
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '200':
          description: OK
  /server/info:
    post:
      tags:
        - Server
      summary: View info
      description: Returns a server object with information about requested server
      operationId: ViewInfo
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '200':
          description: OK
  /server/list:
    get:
      tags:
        - Server
      summary: List servers
      description: 'Returns a list over all servers on requesting account, including information about the servers.'
      operationId: ListServers
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: OK
  /floating_ip/detach:
    post:
      tags:
        - "Floating IP's"
      summary: Detach floating IP
      description: "Detach existing floating IP address from the server it's currently attached to."
      operationId: DetachFloatingIp
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '202':
          description: Accepted
  /floating_ip/attach:
    post:
      tags:
        - "Floating IP's"
      summary: Attach floating IP
      description: Attach existing floating IP address to a server
      operationId: AttachFloatingIp
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '202':
          description: Accepted
  /floating_ip/remove:
    delete:
      tags:
        - "Floating IP's"
      summary: Remove floating IP
      description: "Removes a floating IP address. The IP address must be detached or this function will return an error. Please note that some regions won't allow removal of floating IP's until a certain time has passed, usually 24 hour."
      operationId: RemoveFloatingIp
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '204':
          description: No Content
  /floating_ip/create:
    post:
      tags:
        - "Floating IP's"
      summary: Create floating IP
      description: Create a new floating IP address that can be used in a specific region.
      operationId: CreateFloatingIp
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Failed to create floating IP
                response_type: warning
                response_code: 400
          description: Bad Request
        '401':
          description: Unauthorized
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /floating_ip/list:
    get:
      tags:
        - "Floating IP's"
      summary: List floating IPs
      description: "Returns a list over floating IP's associated with account and which server it's attached to (if any)."
      operationId: ListFloatingIps
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Something went wrong...
          description: Unauthorized
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /ssh_key/remove:
    delete:
      tags:
        - SSH Keys
      summary: Remove SSH key
      description: Delete a specific ssh key by ID or uuid.
      operationId: RemoveSshKey
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '204':
          description: No Content
  /ssh_key/add:
    post:
      tags:
        - SSH Keys
      summary: Add SSH key
      description: 'Upload a public SSH key, on success the response body will contain the new key object'
      operationId: AddSshKey
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /ssh_key/list:
    get:
      tags:
        - SSH Keys
      summary: List SSH keys
      description: Lists all available ssh keys on your account.
      operationId: ListSshKeys
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: OK
  /backup/restore:
    post:
      tags:
        - Backup
      summary: Restore backup
      description: "Restore a source backup image (from ID or uuid) to a target server (identified by ID or uuid). \n\n**Caution**\n\nThe content on target server will be overwritten by the backup image and thus lost forever."
      operationId: RestoreBackup
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '202':
          description: Accepted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Invalid resource requested
                response_type: warning
                response_code: 404
          description: Not Found
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /account/info:
    get:
      tags:
        - Account
      summary: Account info
      description: Fetch and dispalys a limited selection of information about the account associated with the provided authentication key.
      operationId: AccountInfo
      parameters:
        - name: Authorization
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Bearer API_TOKEN
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
              example:
                ID: '123456'
                UUID: 69472922-1725-11e9-ab14-d663bd873d93
                profile:
                  firstname: John
                  lastname: Doe
                  email: john.doe@example.com
                balance: '1500'
                activated: true
                blocked_ports:
                  TCP:
                    - 17
                    - 19
                    - 25
                    - 1900
                  UDP:
                    - 17
                    - 19
                    - 25
                    - 1900
                    - 53413
                servers:
                  limit: 500
                  running: 150
                registerdate: '2016-09-19T07:41:30z'
                lastlogin: '2019-01-05T13:23:54z'
                billing:
                  secondsdue: 2592000
                  duedate: '2019-02-05T13:23:54z'
                  usage: 2.05
                permissions: null
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
              example:
                message: Authorization token does not exist
          description: Unauthorized
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /account/reset:
    post:
      tags:
        - Account
      summary: Reset password
      description: |-
        Generate and email a temporary one time password that can be used to login. (see /v1/account/login for more information).

        **Will this disable my current password?**

        No, it will only offer an alternative way to login. If you suspect that someone is trying to access your account, consider changing your password to a longer and more secure one.

        **Security**

        The one time password will only be active for a limited time, then revoked. Accounts can only be reset once per week. Response messages will not do any attempt to validate input email addresses. This to prevent account leaks.
      operationId: ResetPassword
      parameters:
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
              example:
                message: 'Account reset request received, check your email inbox'
                timestamp: '2019-01-13T11:19:21z'
          description: OK
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
  /account/register:
    post:
      tags:
        - Account
      summary: Register
      description: |-
        Register a new account using provided information. On success, a new generated API key will be returned. (see /v1/account/login for information on usage). Provided email adress should receive an activation email within the next 5 minutes. The new account will be useless untill activated. However, client applications may still allow you to login.

        **Security**

        To prevent data leaks, a generic error message will be used if registration fails for any reason, including the case where you cannot register because the account already exists. If you see this generic error message, please try to login or reset account before complaining to support.
      operationId: Register
      parameters:
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '201':
          description: Created
  /account/login:
    post:
      tags:
        - Account
      summary: Login
      description: "Checking credentials (email and password) and returns the first API key found on the associated account. Client applications can store this key locally in memory to be used for future API requests. \n\n**How do I log out?**\n\nDelete the locally saved key\n\n**Is there a rate limit?**\n\nYes, one login attempt each 30 second per account and IP address is allowed. Too many requests, (i.e bruteforce attempts) will result in denied access for up to 24 hours.\n\n**Security**\n\nTo prevent account information leaks the response will be the same in all three cases, i.e invalid email, invalid password or if both email and password is invalid.\n"
      operationId: Login
      parameters:
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      security: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
  '/region/list_features/{region_id}':
    $ref: ./paths/_public/feature.yaml
  '/plan/list/{region_id}':
    $ref: ./paths/_public/plan.yaml
  '/image/list/{region_id}':
    $ref: ./paths/_public/image.yaml
  /region/list:
    $ref: ./paths/_public/list.yaml
  /account/token_list:
    $ref: ./paths/account_token/list.yaml
  /account/token_remove:
    $ref: ./paths/account_token/remove.yaml
  /availability/list:
    $ref: ./paths/_public/availibility.yaml
tags:
  - name: Public
    description: 'This section contains all information about regions, images, plans and features. The Authorization header is not required for any function in this section.'
  - name: Account
    description: Manage account and sub-accounts. View status and enabled features.
  - name: Account Token
    description: Manage account tokens. Create and remove API tokens and more.
  - name: Billing
    description: 'View account payment transactions, taxes, fees and detailed billing information sorted by resource'
  - name: Backup
    description: 'Manage automatic backups, define schedules or restore servers to earlier states.'
  - name: DNS
    description: Manage domains and DNS records
  - name: SSH Keys
    description: 'Upload and manage your public SSH keys, these keys will be deployed to new servers upon creation, and used instead of password authentication.'
  - name: "Floating IP's"
    description: "Floating point IP's allow you to create and assign additional IP addresses to your servers. Note that the IPv4 range is limited, first come first serve applies. "
  - name: Server
    description: "Create and manage servers with functions in this section. Note that some functions will act as an alias for it's similar alternative, if unsupported in the specific region. Otherwise similar functions may differ. See function descriptions for more details."
  - name: Snapshot
    description: 'Create and manage snapshots. Deployment limitations may apply in some regions, if you intend to use snapshots for backup see: [/docs/#tag/Backup](/docs/#tag/Backup)'
security: []
components:
  securitySchemes: {}
  schemas:
    response-message:
      title: response-message
      type: object
      properties:
        message:
          type: string
          description: Response text with a simple description of the result
        response_type:
          type: string
          description: 'Type of message: success|info|warning|error'
        response_code:
          type: integer
          description: HTTP status code for quick reference
      description: 'A response message and a status code, indicating if the function was executed successfully or not.'
      x-examples:
        example-1:
          message: 'Something went wrong, try this to solve the problem...'
          response_type: error
          response_code: 400
    response-forbidden:
      title: response-forbidden
      type: object
      properties:
        message:
          type: string
          description: Response text with a simple description of the result
        response_type:
          type: string
          description: 'Type of message: success|info|warning|error'
        response_code:
          type: integer
          description: HTTP status code for quick reference
      x-examples:
        example-1:
          message: Authorization token does not exist
          response_type: error
          response_code: 403
      description: 'Access denied, check your auth token'
  headers:
    Content-Type:
      description: Should be set to application/json
      schema:
        type: string
    Authorization:
      description: "Must contain the following: 'Bearer auth_token' where auth_token is one of your accounts authentication tokens"
      schema:
        type: string
