openapi: 3.0.0
info:
  title: 99Stack API documentation
  version: '1.0'
  contact: {}
  description: |-
    **API endpoint**: https://api.99stack.com

    **Bearer token**: https://dash.99stack.com

    ## Using the API

    ### Information

    99Stack API is designed to be fast, secure and reliable. Requests and responses are in the JSON format (application/json) and requests follows the following format: *version/group/function*, alternatively *version/group/function/args* for functions that takes one single argument, usually a region ID. Standard HTTP error codes are used together with status messages to indicate status.

    ### Response codes

    A list over available response codes and their purpose.

    | HTTP Response Code  | Description  |
    |---|---|
    | 200  | Function successfully executed.  |
    | 201  | Resource created successfully  |
    | 204  | Resource removed successfully (no response body)  |
    | 301  | Function is deprecated, (see documentation)  |
    | 400  | Invalid input data, (see documentation)  |
    | 403  | Access denied, check authentication token  |
    | 404  | Function not found  |
    | 405  | Invalid HTTP method  |
    | 429  | Too many requests, please wait  |
    | 500  | Internal server error  |
    | 501  | Function not implemented,   |
    | 502  | Bad gateway, failed to contact external API  |
    | 503  | Service unavailable, maintenance in progress  |

    ### Rate limits

    Rate limits are not in use. However, if possible try to not send more than one request per second. Too many requests in a short time for any reason can trigger the web servers standard protection, effectively blocking all requests from your IP for a few minutes.

    ### Time and Date

    All time and date fields returned by this API are displayed in UTC in the ISO-8601 format.

    ### Examples

    GET request with no arguments:

    ```bash
    curl -X GET "https://api.99stack.com/v1/region/list"
    ```

    GET request that requires your API token:

    ```bash
    curl -X GET -H 'Authorization: Bearer YOUR_TOKEN' "https://api.99stack.com/v1/server/list"
    ```

    POST request containing a JSON request body:

    ```bash
    curl -X POST -H 'Authorization: Bearer YOUR_TOKEN' -H 'Content-Type: application/json' -d '{"name": "New API token"}' "https://api.99stack.com/v1/account/token_create"
    ```

    DELETE request containing a JSON request body:

    ```bash
    curl -X DELETE -H 'Authorization: Bearer YOUR_TOKEN' -H 'Content-Type: application/json' -d '{"server_id": 16324}' "https://api.99stack.com/v1/server/remove"
    ```

    # Authentication

    For any API request that requires authentication, the Authorization header needs to be set to a valid Bearer token, these tokens can be generated in the [control panel](https://dash.99stack.com/auth/manage-api-tokens), or by sending a valid request to `/v1/account/login`. Once you have the token, use the following format:

    ```bash
    Authorization: Bearer YOUR_TOKEN
    ```

    See examples above for usage with cURL.
  termsOfService: 'https://www.99stack.com/legal/terms-of-service'
  license:
    name: MIT
    url: 'https://github.com/99stack/api-docs/blob/master/LICENSE'
servers:
  - url: 'https://api.99stack.com/v1'
    variables: {}
    description: 99Stack API
paths:
  /account/token_create:
    $ref: ./paths/account_token/create.yaml
  /account/token_rename:
    $ref: ./paths/account_token/rename.yaml
  /snapshot/restore:
    $ref: ./paths/snapshot/restore.yaml
  /snapshot/remove:
    $ref: ./paths/snapshot/remove.yaml
  /snapshot/create:
    $ref: ./paths/snapshot/create.yaml
  /snapshot/list:
    $ref: ./paths/snapshot/list.yaml
  /server/remove:
    $ref: ./paths/server/remove.yaml
  /server/create:
    $ref: ./paths/server/create.yaml
  /server/stop:
    $ref: ./paths/server/stop.yaml
  /server/start:
    $ref: ./paths/server/start.yaml
  /server/reboot:
    $ref: ./paths/server/reboot.yaml
  /server/is_online:
    $ref: ./paths/server/is_online.yaml
  /server/info:
    $ref: ./paths/server/info.yaml
  /server/list:
    $ref: ./paths/server/list.yaml
  /floating_ip/detach:
    $ref: ./paths/network/ipv4/detach.yaml
  /floating_ip/attach:
    $ref: ./paths/network/ipv4/attach.yaml
  /floating_ip/remove:
    $ref: ./paths/network/ipv4/remove.yaml
  /floating_ip/create:
    $ref: ./paths/network/ipv4/create.yaml
  /floating_ip/list:
    $ref: ./paths/network/ipv4/list.yaml
  /ssh_key/remove:
    $ref: ./paths/ssh_key/remove.yaml
  /ssh_key/add:
    $ref: ./paths/ssh_key/add.yaml
  /ssh_key/list:
    $ref: ./paths/ssh_key/list.yaml
  /backup/restore:
    $ref: ./paths/backup/restore.yaml
  /account/info:
    $ref: ./paths/account/info.yaml
  /account/reset:
    $ref: ./paths/account/reset.yaml
  /account/register:
    $ref: ./paths/account/register.yaml
  /account/login:
    $ref: ./paths/account/login.yaml
  '/region/list_features/{region_id}':
    $ref: ./paths/_public/feature.yaml
  '/plan/list/{region_id}':
    $ref: ./paths/_public/plan.yaml
  '/image/list/{region_id}':
    $ref: ./paths/_public/image.yaml
  /region/list:
    $ref: ./paths/_public/list.yaml
  /account/token_list:
    $ref: ./paths/account_token/list.yaml
  /account/token_remove:
    $ref: ./paths/account_token/remove.yaml
  /availability/list:
    $ref: ./paths/_public/availibility.yaml
tags:
  - name: Public
    description: 'This section contains all information about regions, images, plans and features. The Authorization header is not required for any function in this section.'
  - name: Account
    description: Manage account and sub-accounts. View status and enabled features.
  - name: Account Token
    description: Manage account tokens. Create and remove API tokens and more.
  - name: Billing
    description: 'View account payment transactions, taxes, fees and detailed billing information sorted by resource'
  - name: Backup
    description: 'Manage automatic backups, define schedules or restore servers to earlier states.'
  - name: DNS
    description: Manage domains and DNS records
  - name: SSH Keys
    description: 'Upload and manage your public SSH keys, these keys will be deployed to new servers upon creation, and used instead of password authentication.'
  - name: "Floating IP's"
    description: "Floating point IP's allow you to create and assign additional IP addresses to your servers. Note that the IPv4 range is limited, first come first serve applies. "
  - name: Server
    description: "Create and manage servers with functions in this section. Note that some functions will act as an alias for it's similar alternative, if unsupported in the specific region. Otherwise similar functions may differ. See function descriptions for more details."
  - name: Snapshot
    description: 'Create and manage snapshots. Deployment limitations may apply in some regions, if you intend to use snapshots for backup see: [/docs/#tag/Backup](/docs/#tag/Backup)'
security: []
components:
  securitySchemes: {}
  schemas:

  headers:
    Content-Type:
      description: Should be set to application/json
      schema:
        type: string
    Authorization:
      description: "Must contain the following: 'Bearer auth_token' where auth_token is one of your accounts authentication tokens"
      schema:
        type: string
